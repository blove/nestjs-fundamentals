swagger: "2.0"
info:
  description: "Learning NestJS for building scalable Node.js server solutions."
  version: "1.0.0"
  title: "NestJS Fundamentals"
host: "localhost"
basePath: "/v1"
tags:
- name: "user"
  description: "Operations about user"
- name: "scotch"
  description: "Operations about scotch"
schemes:
- "https"
- "http"
paths:
  /scotch:
    post:
      tags:
      - "scotch"
      summary: "Create a scotch variety"
      operationId: "createScotch"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created scotch object"
        required: true
        schema:
          $ref: "#/definitions/Scotch"
      responses:
        default:
          description: "successful operation"
  /scotch/{id}:
    get:
      tags:
      - "scotch"
      summary: "Get scotch by id"
      description: ""
      operationId: "getScotchById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Scotch"
        400:
          description: "Invalid scotch id"
        404:
          description: "Scotch not found"
    put:
      tags:
      - "scotch"
      summary: "Updated scotch"
      operationId: "updateScotchById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      - in: "body"
        name: "body"
        description: "Updated scotch object"
        required: true
        schema:
          $ref: "#/definitions/Scotch"
      responses:
        400:
          description: "Invalid scotch id"
        404:
          description: "Scotch not found"
    delete:
      tags:
      - "scotch"
      summary: "Delete scotch"
      operationId: "deleteScotchById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "number"
      responses:
        400:
          description: "Invalid scotch id"
        404:
          description: "Scotch not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://localhost/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify scotches in your account"
      read:pets: "read your scotches"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Distillery:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      region:
        $ref: "#/definitions/Region"
      country:
        type: "string"
      city:
        type: "string"
  Region:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Scotch:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      distillery:
        $ref: "#/definitions/Distillery"
      name:
        type: "string"
      caskType:
        type: "string"
        enum:
        - "wine"
        - "whiskey"
        - "sherry"
        - "spirit"
        - "fortified wine"
      age:
        type: "number"
      strength:
        type: "number"
      price:
        type: "number"
      size:
        type: "number"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"